
Relatório Técnico
===========

* Definição do Desafio:

Fornecidas as duas bases de produtos, o desafio consiste em fazer o
matching dos produtos na base de matching com os produtos na base de
marketplace

- Solução: construção de um interpretador('parser') para a descrição
  de produtos de marketplace e matching
  
- Estratégia: identificar marca, modelo e linha de produto como criterio
  para matching
  
- Importante: 

- 1) Não analisadas linhas maiores de 500 caracteres, com vários
  produtos por linha (muitas ambiguidades no interpretador atual)
  

- 2) Necessária adaptação do interpretador para comportar linhas de
  entrada multi-produtos (aproxim. 3 dias)
  

* Introdução:

Optamos pela implementação em Python de um interpretador simplificado
de descrição de produto como solução ao problema. Esta opção permite a
identificação de todos os atributos relevantes na descrição de um
produto, fazendo-o de maneira bastante flexível com relação a
estrutura (ou falta de) de definição de um produto.

Com o algoritmo simplificado de matching baseado apenas em "exact match"
de marca, linha de produto e modelo de uma base com relação a outra,
chegou-se a uma taxa de sucesso numérica por volta de 50%. Esta
precisão pode ser bastante melhorada com implementação de técnicas de
"similaridade" de strings. aplicados a estes três e todos os demais atributos.

* Repositório:
https://github.com/emadruga/desafio

* Pre-requisito:
- instalar modulo PLY

* Arquivos de Entrada (UNIX):

a) base-smartphone-marketplace-utf8-unix.txt
a.1) Quantidade de produtos (primeira palavra da linha)
$ cut -d " " -f1 planilhas/base-smartphone-marketplace-utf8-unix.txt | sort | uniq -c | sort -n|tail
      7 Kit
      7 Monofone
      8 Câmera
      8 Tampa
     11 Controle
     12 Pen
     14 Celular
     20 Capa
     35 Suporte
   1074 Smartphone


b) base-smartphone-matching-utf8-unix.txt
b.1) Quantidade de produtos
$ cut -d " " -f1 planilhas/base-smartphone-matching-utf8-unix.txt | sort | uniq -c | sort -n|tail
     29 LG
     43 Tablet
     46 Carregador
     47 Samsung
     47 iPad
     50 Capa
     67 Suporte
    151 Celular
    322 Smart
   3803 Smartphone

* Execução (Unix)
$ cd matching/src
$ python base_matching.py planilhas/base-smartphone-marketplace-utf8-unix.txt   planilhas/base-smartphone-matching-utf8-unix.txt  2> error.log

:: Nota: para ambiente Windows, remover "-unix" do nome dos arquivos de entrada.

* Arquivos de saída

- error.log: contém exceções do interpretador, necessárias para
evoluir o interpretador e identificar ainda mais formas diferentes de
detalhar um produto.

- myParser_Market_MatchingParser.dump: tabelas <marca,modelo> e
  <marca,linha de produto> da base de Marketplace
  
- myParser_Offer_MatchingParser.info: registro de produtos na base de
  Matching com e sem sucesso de matching
  
* Resultados 1: numero de smartphones reconhecidos pelo interpretador na versão atual:

== Base Marketplace ==========
==============================
smartphone: 975
Num brands: 975
Num product lines: 975
Num models: 400
==============================
celular smartphone: 6
Num brands: 6
Num product lines: 6
Num models: 6
==============================


== Base Matching  ==========
==============================
smartphone: 3459
Num brands: 3459
Num product lines: 3459
Num models: 1349
==============================
celular smartphone: 114
Num brands: 114
Num product lines: 114
Num models: 81
==============================

* Resultados 2: numero de produtos com e sem matching na base Marketplace
==============================
Num matches:    1784
Num no matches: 1799

* Conclusão

Com algoritmo simplificado de matching baseado em "exact match" de
marca, linha de produto e modelo de uma base com relação a outra,
chegou-se a uma taxa de sucesso numérica por volta de 50%.

Uma dificuldade é determinar qual a proporção dos insucessos se deve a
não existir de fato um produto equivalente na base de
Marketplace. Sabe-se de produtos que de fato existem em uma base e não
existem na outra, como smartphones da Apple. Entretanto, ao analisar
as tabelas nos arquivos de dump e comparando-as com os registros no
arquivo de informações, vê-se que existem muitos modelos e linhas de
produto que diferem de uma base à outra por poucos caracteres:

Numero de Modelo - Base Matching:
	No Model Match (e615): Smartphone LG OPTIMUS L5 DUAL E615 Desbloqueado Preto
	
Numero de Modelo - Base Marketplace:
        'e615f': ['Smartphone LG Optimus L5 E615f Dual Chip Rosa Webfones\n',
                  'Smartphone LG Optimus L5 E615f Dual Chip Frete Gratis Webfones\n'],

Assim, a utilização de um algoritmo de "distância" de strings
aumentará a taxa de sucesso de comparação de produtos. Além disto,
comparando outros atributos de produto que sejam relevantes, e
atribuindo um escore pra cada comparação de atributo bem sucedida,
temos confiança de ultrapassar a taxa de 90% de sucesso.
